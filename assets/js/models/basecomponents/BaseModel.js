App.Models.BaseModel = Backbone.Model.extend({

  // The XMLHttpRequest object generated by the jquery AJAX request
  // from Backbone.sync. It will be stored during the sync process so it's
  // possible to abort the request anytime.
  _jqXHR: null,

  // Functions (Core)
  //-----------------

  // @override
  // Override the sync function so that the options hash can be parsed and
  // the XMLHttpRequest can be stored.
  sync: function(method, model, options) {
    // If no error callback was provided, then use the default error handler.
    if (!options.error) {options.error = this.onSyncError}

    // Call Backbone sync and store the returned XMLHttpRequest
    this._jqXHR = Backbone.sync(method, model, options)
    return this._jqXHR
  },

  onSyncError: function(xhr, textStatus, errorThrown) {
    AppUtil.removeSpinner()

    switch(xhr.status) {
      // 401 - Unauthorized
      case 401:
        if(Backbone.history.fragment === 'signup' ||
           Backbone.history.fragment === 'forgotPassword' ||
           Backbone.history.fragment === 'lookupSerial' ||
           _.contains(Backbone.history.fragment, 'resetPassword')) {
          // Do not route the user to login.
        } else {
          if (App.session.get('loginStatus')) {
            // if logged-in, log user out
            App.NavigationManager.navigateToRoute('logout')
          } else {
            // otherwise, render login screen
            App.NavigationManager.navigateToPage('login')
          }
        }
        break
      // 403 - Forbidden
      case 403:
        App.NavigationManager.navigateToRoute('page/error/403')
        break
      // 404 - Not Found
      case 404:
        App.NavigationManager.navigateToRoute('page/error/404')
        break
      // 500 - Internal Server Error
      case 500:
        App.NavigationManager.navigateToRoute('page/error/500')
        break
      default:
        AppUtil.showAlert('An unexpected error ocurred.')
    }
  }

})
